// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SearchingGram.Data;

namespace SearchingGram.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20200521212118_YouTube_Added")]
    partial class YouTube_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SearchingGram.Models.Accounts.InstaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business_category_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Comments")
                        .HasColumnType("int");

                    b.Property<int>("Follow")
                        .HasColumnType("int");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<string>("Full_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_business_account")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_error")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("Max_comments")
                        .HasColumnType("int");

                    b.Property<string>("Max_comments_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Max_likes")
                        .HasColumnType("int");

                    b.Property<string>("Max_likes_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Min_comments")
                        .HasColumnType("int");

                    b.Property<string>("Min_comments_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Min_likes")
                        .HasColumnType("int");

                    b.Property<string>("Min_likes_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_commentsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsLikes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_likesList")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("InstaAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TikTokAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsLikes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("TikTokAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TwitterAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FollowerCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxRetweets")
                        .HasColumnType("int");

                    b.Property<string>("MaxRetweets_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinRetweets")
                        .HasColumnType("int");

                    b.Property<string>("MinRetweets_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetweetsCount")
                        .HasColumnType("int");

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsRetweets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_retweetsList")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("TwitterAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.YouTubeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChanelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subscribers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideosCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Views")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_commentsCounts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_dislikes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_likes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("_mostDisliked")
                        .HasColumnType("bigint");

                    b.Property<long>("_mostLiked")
                        .HasColumnType("bigint");

                    b.Property<string>("_videoNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_viewsGrows")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_viewsList")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("YouTubeAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WatcherId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("SearchingGram.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.InstaAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("InstaAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TikTokAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("TikTokAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TwitterAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("TwitterAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.YouTubeAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany()
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Monitor", b =>
                {
                    b.HasOne("SearchingGram.Models.Watcher", "Watcher")
                        .WithMany("Monitors")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
