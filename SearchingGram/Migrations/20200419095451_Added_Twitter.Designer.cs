// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SearchingGram.Data;

namespace SearchingGram.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20200419095451_Added_Twitter")]
    partial class Added_Twitter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SearchingGram.Models.Accounts.InstaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsLikes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("InstaAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TikTokAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsLikes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("TikTokAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TwitterAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonitorOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_growsRetweets")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorOwnerId");

                    b.ToTable("TwitterAccounts");
                });

            modelBuilder.Entity("SearchingGram.Models.Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WatcherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WatcherId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("SearchingGram.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.InstaAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("InstaAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TikTokAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("TikTokAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Accounts.TwitterAccount", b =>
                {
                    b.HasOne("SearchingGram.Models.Monitor", "MonitorOwner")
                        .WithMany("TwitterAccounts")
                        .HasForeignKey("MonitorOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchingGram.Models.Monitor", b =>
                {
                    b.HasOne("SearchingGram.Models.Watcher", "Watcher")
                        .WithMany("Monitors")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
